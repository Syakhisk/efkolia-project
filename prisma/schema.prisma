generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agenda_group {
  id         Int       @id @default(autoincrement())
  user_id    Int       @default(autoincrement())
  code       String?
  name       String
  teacher    String
  schedule   String
  created_at DateTime  @default(now())
  updated_at DateTime?
  users      users     @relation(fields: [user_id], references: [id])
  agendas    agendas[]
}

model agendas {
  id           Int          @id @default(autoincrement())
  user_id      Int          @default(autoincrement())
  group_id     Int          @default(autoincrement())
  name         String
  description  String?
  deadline     DateTime?
  status       Int          @default(0)
  created_at   DateTime     @default(now())
  updated_at   DateTime?
  agenda_group agenda_group @relation(fields: [group_id], references: [id])
  users        users        @relation(fields: [user_id], references: [id])
}

model subjects {
  id         Int       @id @default(autoincrement())
  user_id    Int       @default(autoincrement())
  code       String?
  name       String
  teacher    String
  schedule   String
  created_at DateTime  @default(now())
  updated_at DateTime?
  users      users     @relation(fields: [user_id], references: [id])
  tasks      tasks[]
}

model tasks {
  id          Int       @id @default(autoincrement())
  user_id     Int       @default(autoincrement())
  subject_id  Int       @default(autoincrement())
  name        String
  description String?
  deadline    DateTime?
  status      Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  subjects    subjects  @relation(fields: [subject_id], references: [id])
  users       users     @relation(fields: [user_id], references: [id])
}

model user_configs {
  id         Int       @id @default(autoincrement())
  user_id    Int       @default(autoincrement())
  key        String
  value      String
  created_at DateTime  @default(now())
  updated_at DateTime?
  users      users     @relation(fields: [user_id], references: [id])
}

model users {
  id           Int            @id @default(autoincrement())
  email        String?
  username     String?
  password     String?
  created_at   DateTime       @default(now())
  updated_at   DateTime?
  first_name   String
  last_name    String?
  agenda_group agenda_group[]
  agendas      agendas[]
  subjects     subjects[]
  tasks        tasks[]
  user_configs user_configs[]
}

model accounts {
  id                   Int       @id @default(autoincrement())
  compound_id          String    @unique
  user_id              Int
  provider_type        String
  provider_id          String
  provider_account_id  String
  refresh_token        String?
  access_token         String?
  access_token_expires DateTime?
  created_at           DateTime  @default(now())
  updated_at           DateTime  @default(now())

  @@index([provider_account_id], name: "provider_account_id")
  @@index([provider_id], name: "provider_id")
  @@index([user_id], name: "user_id")
}

model sessions {
  id            Int      @id @default(autoincrement())
  user_id       Int
  expires       DateTime
  session_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now())
}

model verification_requests {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}
